--- src/main/java/mx/unam/ciencias/icc/Lista.java
+++ src/main/java/mx/unam/ciencias/icc/Lista.java
@@ -28,7 +28,7 @@ public class Lista {
 
         /* Construye un nodo con un elemento. */
         private Nodo(Object elemento) {
-            // Aquí va su código.
+	    this.elemento=elemento;
         }
 
         /**
@@ -36,7 +36,7 @@ public class Lista {
          * @return el nodo anterior del nodo.
          */
         public Nodo getAnterior() {
-            // Aquí va su código.
+            return anterior;
         }
 
         /**
@@ -44,7 +44,7 @@ public class Lista {
          * @return el nodo siguiente del nodo.
          */
         public Nodo getSiguiente() {
-            // Aquí va su código.
+            return siguiente;
         }
 
         /**
@@ -52,7 +52,7 @@ public class Lista {
          * @return el elemento del nodo.
          */
         public Object get() {
-            // Aquí va su código.
+            return elemento;
         }
     }
 
@@ -68,7 +68,7 @@ public class Lista {
      * @return la longitud de la lista, el número de elementos que contiene.
      */
     public int getLongitud() {
-        // Aquí va su código.
+        return longitud;
     }
 
     /**
@@ -77,7 +77,7 @@ public class Lista {
      *         otro caso.
      */
     public boolean esVacia() {
-        // Aquí va su código.
+    	return longitud==0;
     }
 
     /**
@@ -87,8 +87,24 @@ public class Lista {
      * @throws IllegalArgumentException si <code>elemento</code> es
      *         <code>null</code>.
      */
-    public void agregaFinal(Object elemento) {
-        // Aquí va su código.
+    public void agregaFinal(Object elemento) throws IllegalArgumentException{
+	 if(elemento==null){ //Si el elemento es null (vacío)
+	     throw new IllegalArgumentException();
+	}
+	if(esVacia()){//Si la lista es vacìa
+
+	    Nodo n=new Nodo(elemento); //Creamos un nuevo objeto nodo 
+	    cabeza=n;
+	    rabo=n;
+	    longitud=longitud+1;
+	}
+	else{//Osea si la lista no es vacìa
+	    Nodo n = new Nodo(elemento);
+	    rabo.siguiente = n; // Enlaza el último nodo al nuevo
+	    n.anterior = rabo;  // El nuevo nodo apunta al antiguo rabo
+	    rabo = n;           // Actualiza rabo al nuevo nodo
+	    longitud++;
+	}
     }
 
     /**
@@ -98,8 +114,24 @@ public class Lista {
      * @throws IllegalArgumentException si <code>elemento</code> es
      *         <code>null</code>.
      */
-    public void agregaInicio(Object elemento) {
-        // Aquí va su código.
+    public void agregaInicio(Object elemento) throws IllegalArgumentException {
+	 if(elemento==null){
+	     throw new IllegalArgumentException();
+	 }
+	 if(esVacia()){//si la lista es vacìa
+	     Nodo n=new Nodo(elemento); //Creamos un nuevo objeto nodo
+	     cabeza=n;
+	     rabo=n;
+	     longitud=longitud+1;
+	 }
+	 else{//Osea si la lista no es vacìa
+	     Nodo n=new Nodo(elemento);
+	     cabeza.anterior=n;
+	     n.siguiente=cabeza;
+	     cabeza=n;
+	     longitud=longitud+1;
+	     
+	}
     }
 
     /**
@@ -117,8 +149,37 @@ public class Lista {
      * @throws IllegalArgumentException si <code>elemento</code> es
      *         <code>null</code>.
      */
-    public void inserta(int i, Object elemento) {
-        // Aquí va su código.
+
+    public void auxiliarInserta(int i, Nodo iterable, Nodo insertar){
+	if(i==0){
+	    insertar.anterior=iterable.anterior;
+	    insertar.siguiente=iterable;
+	    iterable.anterior.siguiente=insertar;
+	    iterable.anterior=insertar;
+	    longitud++;
+	    return;
+	}
+	auxiliarInserta(i-1,iterable.siguiente,insertar);
+    }
+
+    
+    public void inserta(int i, Object elemento) throws IllegalArgumentException {
+         if(elemento==null){
+	     throw new IllegalArgumentException();
+	}
+	if(i<=0){
+	    agregaInicio(elemento);
+	    return;
+	    
+	}
+	else if(i>=longitud){
+	    agregaFinal(elemento);
+	    return;
+	}
+	else{
+	    Nodo insertar=new Nodo(elemento);
+	    auxiliarInserta(i-1, cabeza.siguiente,insertar);
+	}
     }
 
     /**
@@ -126,8 +187,36 @@ public class Lista {
      * lista, el método no la modifica.
      * @param elemento el elemento a eliminar.
      */
+
+    public void auxiliarElimina(Object elemento, Nodo iterable) {
+	if (iterable == null) { 
+	    return;
+	}
+	if (iterable.elemento.equals(elemento)) {
+	    iterable.anterior.siguiente = iterable.siguiente;
+	    if (iterable.siguiente != null) {
+		iterable.siguiente.anterior = iterable.anterior; 
+	    } else { 
+		rabo = iterable.anterior; 
+	    }
+	    longitud--;
+	    return;
+	}
+	auxiliarElimina(elemento, iterable.siguiente); 
+    }
+
+
+
+    
     public void elimina(Object elemento) {
-        // Aquí va su código.
+        if (esVacia() || elemento == null) {
+	    return;
+	}
+	if (cabeza.elemento.equals(elemento)) { 
+	    eliminaPrimero();
+	    return;
+	}
+	auxiliarElimina(elemento, cabeza); 
     }
 
     /**
@@ -136,7 +225,19 @@ public class Lista {
      * @throws NoSuchElementException si la lista es vacía.
      */
     public Object eliminaPrimero() {
-        // Aquí va su código.
+	if (longitud == 0) {
+	    throw new NoSuchElementException("La lista está vacía");
+	}
+	Object elemento = cabeza.elemento;
+	if (cabeza == rabo) {
+	    cabeza = null;
+	    rabo = null;
+	} else {
+	    cabeza = cabeza.siguiente;
+	    cabeza.anterior = null;
+	}
+	longitud--;
+	return elemento;
     }
 
     /**
@@ -145,7 +246,20 @@ public class Lista {
      * @throws NoSuchElementException si la lista es vacía.
      */
     public Object eliminaUltimo() {
-        // Aquí va su código.
+        if(esVacia()){
+	    throw new NoSuchElementException("La lista està vacìa"); 
+	}
+	Object e=rabo.elemento;
+	if(cabeza==rabo){
+	    cabeza=null; 
+	    rabo=null; 
+	}
+	else{
+	    rabo=rabo.anterior; 
+	    rabo.siguiente=null; 
+	}
+	longitud=longitud-1; 
+	return e; 
     }
 
     /**
@@ -154,16 +268,37 @@ public class Lista {
      * @return <code>true</code> si <code>elemento</code> está en la lista,
      *         <code>false</code> en otro caso.
      */
+    public boolean auxiliarContiene(Object elemento, Nodo iterable){
+	if(iterable==null){
+	    return false;
+	}
+	if(iterable.elemento.equals(elemento)){
+	    return true;
+	}
+	
+	return auxiliarContiene(elemento, iterable.siguiente);
+    }
+
+    
     public boolean contiene(Object elemento) {
-        // Aquí va su código.
+	return auxiliarContiene(elemento, cabeza);
     }
 
     /**
      * Regresa la reversa de la lista.
      * @return una nueva lista que es la reversa la que manda llamar el método.
      */
+    public Lista auxiliarReversa(Lista alreves, Nodo iterable){
+	if(iterable==null){
+	    return alreves;
+	}
+	alreves.agregaInicio(iterable.elemento);
+	return auxiliarReversa(alreves, iterable.siguiente);
+     }
+    
     public Lista reversa() {
-        // Aquí va su código.
+	Lista inversa=new Lista(); 
+	return auxiliarReversa(inversa, cabeza); 
     }
 
     /**
@@ -171,15 +306,26 @@ public class Lista {
      * lista que manda llamar el método, en el mismo orden.
      * @return una copiad de la lista.
      */
+    public Lista auxiliarCopia(Lista copia, Nodo iterable){
+	if (iterable==null){
+	    return copia;
+	}
+	copia.agregaFinal(iterable.elemento);
+	return auxiliarCopia(copia, iterable.siguiente);
+     }
+    
     public Lista copia() {
-        // Aquí va su código.
+        Lista copia = new Lista();
+        return auxiliarCopia(copia, cabeza); 
     }
 
+   
     /**
      * Limpia la lista de elementos, dejándola vacía.
      */
     public void limpia() {
-        // Aquí va su código.
+        cabeza=rabo=null;
+        longitud=0;
     }
 
     /**
@@ -188,7 +334,10 @@ public class Lista {
      * @throws NoSuchElementException si la lista es vacía.
      */
     public Object getPrimero() {
-        // Aquí va su código.
+        if(esVacia()){
+	    throw new NoSuchElementException("La lista està vacìa");
+	}
+	return cabeza.elemento;
     }
 
     /**
@@ -197,7 +346,10 @@ public class Lista {
      * @throws NoSuchElementException si la lista es vacía.
      */
     public Object getUltimo() {
-        // Aquí va su código.
+        if(esVacia()){
+	    throw new NoSuchElementException("La lista està vacìa");
+	}
+	return rabo.elemento;
     }
 
     /**
@@ -208,7 +360,14 @@ public class Lista {
      *         igual que el número de elementos en la lista.
      */
     public Object get(int i) {
-        // Aquí va su código.
+	if (i < 0 || i >= longitud) {
+	    throw new ExcepcionIndiceInvalido("Índice inválido: " + i);
+	}
+	Nodo nodoActual = cabeza;
+	for (int contador = 0; contador < i; contador++) {
+	    nodoActual = nodoActual.siguiente;
+	}
+	return nodoActual.elemento;
     }
 
     /**
@@ -217,16 +376,44 @@ public class Lista {
      * @return el índice del elemento recibido en la lista, o -1 si el elemento
      *         no está contenido en la lista.
      */
+    
+    public int auxiliarIndiceDe(Object elemento, Nodo iterable, int indice){
+	if(iterable==null){
+	    return -1;
+	}
+	if(iterable.elemento.equals(elemento)){
+	    return indice;
+	}
+	return auxiliarIndiceDe(elemento,iterable.siguiente,indice+1);
+    }
+    
     public int indiceDe(Object elemento) {
-        // Aquí va su código.
+        int indice=0;
+	return auxiliarIndiceDe(elemento,cabeza,indice);
     }
 
     /**
      * Regresa una representación en cadena de la lista.
      * @return una representación en cadena de la lista.
      */
+    
+    public String auxiliarToString(String s, Nodo iterable){
+	if(iterable==null){
+	     s+="]";
+	     return s;
+	 }
+	 s += String.format("%s", iterable.elemento);
+	 if(iterable.siguiente!=null){
+	     s+=", ";
+	 }
+	 return auxiliarToString(s, iterable.siguiente);
+     }
     @Override public String toString() {
-        // Aquí va su código.
+        if (esVacia()){
+            return "[]";
+	}
+	String s = "[";
+	return auxiliarToString(s, cabeza); 
     }
 
     /**
@@ -235,11 +422,29 @@ public class Lista {
      * @return <code>true</code> si la lista es igual al objeto recibido;
      *         <code>false</code> en otro caso.
      */
+    public boolean auxiliarEquals(Lista lista, Nodo nodo1, Nodo nodo2){
+	if(nodo1==null && nodo2==null){
+	    return true;
+	}
+	if (!nodo1.elemento.equals(nodo2.elemento)){
+	    return false; //Devuelve false
+	}
+	return auxiliarEquals(lista, nodo1.siguiente, nodo2.siguiente);
+    }
+    
     @Override public boolean equals(Object objeto) {
         if (!(objeto instanceof Lista))
             return false;
         Lista lista = (Lista)objeto;
-        // Aquí va su código.
+        if(lista==null){
+	    return false;
+	}
+        if(this.longitud!=lista.longitud){
+	    return false;
+	}
+	Nodo nodo1 = this.cabeza; 
+        Nodo nodo2 = lista.cabeza;
+        return auxiliarEquals(lista, nodo1, nodo2);
     }
 
     /**
