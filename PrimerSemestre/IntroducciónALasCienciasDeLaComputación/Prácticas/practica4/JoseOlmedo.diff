diff --git a/src/main/java/mx/unam/ciencias/icc/Estudiante.java b/src/main/java/mx/unam/ciencias/icc/Estudiante.java
index 2e6fcc0..cf5c9d4 100644
--- a/src/main/java/mx/unam/ciencias/icc/Estudiante.java
+++ b/src/main/java/mx/unam/ciencias/icc/Estudiante.java
@@ -26,7 +26,11 @@ public class Estudiante {
                       int    cuenta,
                       double promedio,
                       int    edad) {
-        // Aquí va su código.
+	 this.nombre=nombre; //Hacemos referencia a la variable de clase = Hacemos referencia al atributo del constructor.
+        this.cuenta=cuenta; //Hacemos referencia a la variable de clase = Hacemos referencia al atributo del constructor.
+        this.promedio=promedio; //Hacemos referencia a la variable de clase = Hacemos referencia al atributo del constructor.
+        this.edad=edad; // Hacemos referencia a la variable de clase = Hacemos referencia al atributo del constructor.
+        
     }
 
     /**
@@ -34,7 +38,7 @@ public class Estudiante {
      * @return el nombre del estudiante.
      */
     public String getNombre() {
-        // Aquí va su código.
+	return nombre;
     }
 
     /**
@@ -42,7 +46,7 @@ public class Estudiante {
      * @param nombre el nuevo nombre del estudiante.
      */
     public void setNombre(String nombre) {
-        // Aquí va su código.
+        this.nombre=nombre;
     }
 
     /**
@@ -50,7 +54,7 @@ public class Estudiante {
      * @return el número de cuenta del estudiante.
      */
     public int getCuenta() {
-        // Aquí va su código.
+        return cuenta;
     }
 
     /**
@@ -58,7 +62,7 @@ public class Estudiante {
      * @param cuenta el nuevo número de cuenta del estudiante.
      */
     public void setCuenta(int cuenta) {
-        // Aquí va su código.
+        this.cuenta=cuenta;
     }
 
     /**
@@ -66,7 +70,7 @@ public class Estudiante {
      * @return el promedio del estudiante.
      */
     public double getPromedio() {
-        // Aquí va su código.
+        return promedio;
     }
 
     /**
@@ -74,7 +78,7 @@ public class Estudiante {
      * @param promedio el nuevo promedio del estudiante.
      */
     public void setPromedio(double promedio) {
-        // Aquí va su código.
+        this.promedio=promedio;
     }
 
     /**
@@ -82,7 +86,7 @@ public class Estudiante {
      * @return la edad del estudiante.
      */
     public int getEdad() {
-        // Aquí va su código.
+        return edad;
     }
 
     /**
@@ -90,7 +94,7 @@ public class Estudiante {
      * @param edad la nueva edad del estudiante.
      */
     public void setEdad(int edad) {
-        // Aquí va su código.
+        this.edad=edad;
     }
 
     /**
@@ -98,7 +102,14 @@ public class Estudiante {
      * @return una representación en cadena del estudiante.
      */
     @Override public String toString() {
-        // Aquí va su código.
+	String cadena = String.format("Nombre   : %s\n" +
+                               "Cuenta   : %09d\n" +
+                               "Promedio : %2.2f\n" +
+                               "Edad     : %d",
+                               nombre, cuenta, promedio, edad);
+
+	return  cadena;
+	
     }
 
     /**
@@ -113,6 +124,9 @@ public class Estudiante {
         if (!(objeto instanceof Estudiante))
             return false;
         Estudiante estudiante = (Estudiante)objeto;
-        // Aquí va su código.
+	return this.nombre.equals(estudiante.nombre) &&  //una variación es if ondiciones, true         
+               this.cuenta == estudiante.cuenta &&                              
+               this.promedio == estudiante.promedio &&                          
+               this.edad == estudiante.edad;// Aquí va su código.            
     }
 }
diff --git a/src/main/java/mx/unam/ciencias/icc/Lista.java b/src/main/java/mx/unam/ciencias/icc/Lista.java
index 106877b..8a26f55 100644
--- a/src/main/java/mx/unam/ciencias/icc/Lista.java
+++ b/src/main/java/mx/unam/ciencias/icc/Lista.java
@@ -26,7 +26,7 @@ public class Lista {
 
         /* Construye un nodo con un elemento. */
         private Nodo(Object elemento) {
-            // Aquí va su código.
+            this.elemento=elemento; //Construye al nodo (un objeto de la clase Object)
         }
 
         /**
@@ -34,7 +34,7 @@ public class Lista {
          * @return el nodo anterior del nodo.
          */
         public Nodo getAnterior() {
-            // Aquí va su código.
+            return anterior;
         }
 
         /**
@@ -42,7 +42,7 @@ public class Lista {
          * @return el nodo siguiente del nodo.
          */
         public Nodo getSiguiente() {
-            // Aquí va su código.
+            return siguiente;
         }
 
         /**
@@ -50,7 +50,7 @@ public class Lista {
          * @return el elemento del nodo.
          */
         public Object get() {
-            // Aquí va su código.
+            return elemento;
         }
     }
 
@@ -66,7 +66,7 @@ public class Lista {
      * @return la longitud de la lista, el número de elementos que contiene.
      */
     public int getLongitud() {
-        // Aquí va su código.
+        return longitud;
     }
 
     /**
@@ -75,7 +75,7 @@ public class Lista {
      *         otro caso.
      */
     public boolean esVacia() {
-        // Aquí va su código.
+        return longitud==0;
     }
 
     /**
@@ -85,7 +85,23 @@ public class Lista {
      *                 si es distinto de <code>null</code>.
      */
     public void agregaFinal(Object elemento) {
-        // Aquí va su código.
+        if(elemento==null){ //Si el elemento es null (vacío)
+	    return;//no hacer nada xD
+	}
+	if(esVacia()){//Si la lista es vacìa
+
+	    Nodo n=new Nodo(elemento); //Creamos un nuevo objeto nodo 
+	    cabeza=n;
+	    rabo=n;
+	    longitud=longitud+1;
+	}
+	else{//Osea si la lista no es vacìa
+	    Nodo n = new Nodo(elemento);
+	    rabo.siguiente = n; // Enlaza el último nodo al nuevo
+	    n.anterior = rabo;  // El nuevo nodo apunta al antiguo rabo
+	    rabo = n;           // Actualiza rabo al nuevo nodo
+	    longitud++;
+	}
     }
 
     /**
@@ -95,7 +111,23 @@ public class Lista {
      *                 si es distinto de <code>null</code>.
      */
     public void agregaInicio(Object elemento) {
-        // Aquí va su código.
+        if(elemento==null){
+	    return; //no hacer nada xD
+	}// Aquí va su código.
+	if(esVacia()){//si la lista es vacìa
+	    Nodo n=new Nodo(elemento); //Creamos un nuevo objeto nodo 
+	    cabeza=n;
+	    rabo=n;
+	    longitud=longitud+1;
+	}
+	else{//Osea si la lista no es vacìa
+	    Nodo n=new Nodo(elemento);
+	    cabeza.anterior=n;
+	    n.siguiente=cabeza;
+	    cabeza=n;
+	    longitud=longitud+1;
+	    
+	}
     }
 
     /**
@@ -112,8 +144,36 @@ public class Lista {
      * @param elemento el elemento a insertar. El elemento se inserta únicamente
      *                 si es distinto de <code>null</code>.
      */
+
+    public void auxiliarInserta(int i, Nodo iterable, Nodo insertar){
+	if(i==0){
+	    insertar.anterior=iterable.anterior; //hago que mi elemento anterior al nuevo elemento que voy a insertar sea el elemento anterior del nodo (elemento) con el que iteré
+            insertar.siguiente=iterable; //hago que mi elemento siguiente al nuevo elemento que voy a insertar sea igual al elemento (nodo) con el que iteré (terminé en la posición que deseo que esté mi nuevo elemento)
+            iterable.anterior.siguiente=insertar; //hago que el elemento (nodo) que precedía al iterable ahora tenga como siguiente al nodo que estamos insertando.
+            iterable.anterior=insertar; //hago que el elemento (nodo) anterior a mi nodo de iteración sea el elemento (nodo) que quiero insertar.
+            longitud++; //actualizo la longitud de mi lista.
+	    return;
+	}
+	auxiliarInserta(i-1,iterable.siguiente,insertar);
+    }
+    
     public void inserta(int i, Object elemento) {
-        // Aquí va su código.
+        if(elemento==null){
+	    return;
+	}
+	if(i<=0){
+	    agregaInicio(elemento);//Llamamos al método anterior para colocarlo en el inicio
+	    return;
+	    
+	}
+	else if(i>=longitud){
+	    agregaFinal(elemento); //Llamamos al método anterior para colocarlo al final
+	    return;
+	}
+	else{
+	    Nodo insertar=new Nodo(elemento);
+	    auxiliarInserta(i-1, cabeza.siguiente,insertar);
+	}
     }
 
     /**
@@ -121,8 +181,36 @@ public class Lista {
      * lista, el método no la modifica.
      * @param elemento el elemento a eliminar.
      */
+
+    public void auxiliarElimina(Object elemento, Nodo iterable) {
+	if (iterable == null) { // Caso base: llegamos al final sin encontrar el elemento
+	    return;
+	}
+	if (iterable.elemento.equals(elemento)) {
+	    iterable.anterior.siguiente = iterable.siguiente; // Enlaza el nodo actual sea el nodo siguiente (desligamos una parte del nodo)
+	    if (iterable.siguiente != null) { // Verificamos que el contenido del nodo de iteración no sea el siguiente, porque sino sería el rabo
+		iterable.siguiente.anterior = iterable.anterior; // Enlaza el nodo siguiente con el anterior
+	    } else { //En caso de que el elemento del nodo siguiente sea nulo significa que estamos en el rabo
+		rabo = iterable.anterior; // Actualiza el rabo si el nodo que queremos eliminar es el el último (asi si pasa las pruebas)
+	    }
+	    longitud--; // Disminuimos la longitud 1 unidad
+	    return;
+	}
+	auxiliarElimina(elemento, iterable.siguiente); // Iteramos al siguiente nodo
+    }
+
+
+
+    
     public void elimina(Object elemento) {
-        // Aquí va su código.
+        if (esVacia() || elemento == null) {
+	    return;
+	}
+	if (cabeza.elemento.equals(elemento)) { //En caso de que el elemento a eliminar sea el primero de mi lista
+	    eliminaPrimero();
+	    return;
+	}
+	auxiliarElimina(elemento, cabeza); // Busca desde la cabeza para ver sino hay elementos repetidos
     }
 
     /**
@@ -131,7 +219,20 @@ public class Lista {
      *         <code>null</code> si la lista es vacía.
      */
     public Object eliminaPrimero() {
-        // Aquí va su código.
+        if(longitud==0){ //Si la lista es vacía
+	    return null; //Regresaremos null
+	}
+	Object e=cabeza.elemento;//accedo al elemento de cabeza, (ya que es un objeto de la clase Nodo y contiene como atributo a elemento) 
+	if(cabeza==rabo){//En dado caso que la lista tenga solo un elemento
+	    cabeza=null; //eliminamos el primer elemento de la cabeza y
+	    rabo=null; //elminamos el último elemento de la cabeza.
+	}
+	else{
+	    cabeza=cabeza.siguiente; //Hacemos que la nueva cabeza (primer elemento de la lista) sea ahora el segundo elemento de la lista
+	    cabeza.anterior=null; //eliminamos el elemento anterior a la nueva cabeza de la lista.
+	}
+	longitud=longitud-1; //reducimos la longitud de la lista en 1
+	return e; //regresamos el elemento a eliminar
     }
 
     /**
@@ -140,7 +241,20 @@ public class Lista {
      *         <code>null</code> si la lista es vacía.
      */
     public Object eliminaUltimo() {
-        // Aquí va su código.
+        if(esVacia()){ //Si la lista es vacía
+	    return null; //Regresaremos null
+	}
+	Object e=rabo.elemento;//accedo al elemento de rabo, (ya que es un objeto de la clase Nodo y contiene como atributo a elemento) 
+	if(cabeza==rabo){//En dado caso que la lista tenga solo un elemento
+	    cabeza=null; //eliminamos el primer elemento de la cabeza y
+	    rabo=null; //elminamos el último elemento de la cabeza.
+	}
+	else{
+	    rabo=rabo.anterior; //Hacemos que el nuevo rabo (último elemento de la lista) sea ahora el penúltimo elemento de la lista.
+	    rabo.siguiente=null; //eliminamos el elemento siguiente al nuevo rabo de la lista.
+	}
+	longitud=longitud-1; //reducimos la longitud de la lista en 1
+	return e; //regresamos el elemento a eliminar
     }
 
     /**
@@ -149,16 +263,41 @@ public class Lista {
      * @return <code>true</code> si <code>elemento</code> está en la lista,
      *         <code>false</code> en otro caso.
      */
+
+    public boolean auxiliarContiene(Object elemento, Nodo iterable){
+
+	if(iterable==null){
+	    return false;
+	}
+	if(iterable.elemento.equals(elemento)){
+	    return true;
+	}
+	
+	return auxiliarContiene(elemento, iterable.siguiente);
+
+
+    }
+    
     public boolean contiene(Object elemento) {
-        // Aquí va su código.
+        return auxiliarContiene(elemento, cabeza);
     }
 
     /**
      * Regresa la reversa de la lista.
      * @return una nueva lista que es la reversa la que manda llamar el método.
      */
+
+     public Lista auxiliarReversa(Lista alreves, Nodo iterable){
+	if(iterable==null){//Caso Base
+	    return alreves;
+	}
+	alreves.agregaInicio(iterable.elemento);
+	return auxiliarReversa(alreves, iterable.siguiente);
+     }
+    
     public Lista reversa() {
-        // Aquí va su código.
+        Lista inversa=new Lista(); //Creamos un objeto de tipo Lista estudiante para devolver la reversa
+	return auxiliarReversa(inversa, cabeza); //Devolvemos la lista volteada
     }
 
     /**
@@ -166,15 +305,26 @@ public class Lista {
      * lista que manda llamar el método, en el mismo orden.
      * @return una copiad de la lista.
      */
+
+     public Lista auxiliarCopia(Lista copia, Nodo iterable){
+	if (iterable==null){//Caso base
+	    return copia;
+	}
+	copia.agregaFinal(iterable.elemento);//Agrega al final de mi copia de la lista los elementos de mi lista original
+	return auxiliarCopia(copia, iterable.siguiente);
+     }
+    
     public Lista copia() {
-        // Aquí va su código.
+        Lista copia = new Lista(); //Creamos un nuevo objeto de tipo ListaEstudiante
+        return auxiliarCopia(copia, cabeza);//Recursión  
     }
 
     /**
      * Limpia la lista de elementos, dejándola vacía.
      */
     public void limpia() {
-        // Aquí va su código.
+        cabeza=rabo=null;
+	longitud=0;
     }
 
     /**
@@ -183,7 +333,7 @@ public class Lista {
      *         es vacía.
      */
     public Object getPrimero() {
-        // Aquí va su código.
+        return esVacia()?null:cabeza.elemento;
     }
 
     /**
@@ -192,7 +342,7 @@ public class Lista {
      *         es vacía.
      */
     public Object getUltimo() {
-        // Aquí va su código.
+        return esVacia()?null:rabo.elemento;
     }
 
     /**
@@ -202,8 +352,18 @@ public class Lista {
      *         <em>i</em> es menor que cero o mayor o igual que el número de
      *         elementos en la lista.
      */
+    public Object auxiliarGet(int i, Nodo iterable){
+	if(i==0){
+	    return iterable.elemento;
+	}
+	return auxiliarGet(i-1,iterable.siguiente);
+    }
+    
     public Object get(int i) {
-        // Aquí va su código.
+	if(i<0 || i>=longitud){
+	    return null;
+	}
+	return auxiliarGet(i,cabeza);
     }
 
     /**
@@ -212,16 +372,46 @@ public class Lista {
      * @return el índice del elemento recibido en la lista, o -1 si el elemento
      *         no está contenido en la lista.
      */
+
+    public int auxiliarIndiceDe(Object elemento, Nodo iterable, int indice){
+	if(iterable==null){
+	    return -1;
+	}
+	if(iterable.elemento.equals(elemento)){
+	    return indice;
+	}
+	return auxiliarIndiceDe(elemento,iterable.siguiente,indice+1);
+    }
+	
+
+	
     public int indiceDe(Object elemento) {
-        // Aquí va su código.
+        int indice=0;
+	return auxiliarIndiceDe(elemento,cabeza,indice);
     }
 
     /**
      * Regresa una representación en cadena de la lista.
      * @return una representación en cadena de la lista.
      */
+     public String auxiliarToString(String s, Nodo iterable){
+	 if(iterable==null){
+	     s+="]";
+	     return s;
+	 }
+	 s += String.format("%s", iterable.elemento);
+	 if(iterable.siguiente!=null){
+	     s+=", ";
+	 }
+	 return auxiliarToString(s, iterable.siguiente);
+     }
+
     @Override public String toString() {
-        // Aquí va su código.
+	if (esVacia()){
+            return "[]";
+	}
+	String s = "[";
+	return auxiliarToString(s, cabeza); //Recursión      
     }
 
     /**
@@ -230,11 +420,29 @@ public class Lista {
      * @return <code>true</code> si la lista es igual al objeto recibido;
      *         <code>false</code> en otro caso.
      */
+       public boolean auxiliarEquals(Lista lista, Nodo nodo1, Nodo nodo2){
+	   if(nodo1==null && nodo2==null){
+	       return true;
+	   }
+	   if (!nodo1.elemento.equals(nodo2.elemento)){
+	       return false; //Devuelve false
+	   }
+	   return auxiliarEquals(lista, nodo1.siguiente, nodo2.siguiente);
+       }
+    
     @Override public boolean equals(Object objeto) {
         if (!(objeto instanceof Lista))
             return false;
         Lista lista = (Lista)objeto;
-        // Aquí va su código.
+        if(lista==null){
+	    return false;
+	}
+        if(this.longitud!=lista.longitud){
+	    return false;
+	}
+	Nodo nodo1 = this.cabeza; 
+        Nodo nodo2 = lista.cabeza;
+        return auxiliarEquals(lista, nodo1, nodo2);
     }
 
     /**
@@ -242,7 +450,7 @@ public class Lista {
      * @return el nodo cabeza de la lista.
      */
     public Nodo getCabeza() {
-        // Aquí va su código.
+        return cabeza;
     }
 
     /**
@@ -250,6 +458,6 @@ public class Lista {
      * @return el nodo rabo de la lista.
      */
     public Nodo getRabo() {
-        // Aquí va su código.
+        return rabo;
     }
 }
